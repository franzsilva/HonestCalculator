type: edu
files:
- name: honest_calc.py
  visible: true
  text: |
    import sys
    memory = float(0)

    operations = ["+", "-", "*", "/"]


    def isfloat(num):
        try:
            float(num)
            return True
        except ValueError:
            return False


    while(True):
        print("Enter an equation")
        x, oper, y = input("").split()
        x = memory if x == "M" else x
        y = memory if y == "M" else y
        if isfloat(x) and isfloat(y):
            if oper in operations:
                result = 0.0
                if oper == "+":
                    result = float(x) + float(y)
                    print(result)
                elif oper == "-":
                    result = float(x) - float(y)
                    print(result)
                elif oper == "*":
                    result = float(x) * float(y)
                    print(result)
                elif oper == "/" and float(y) != 0:
                    result = float(x) / float(y)
                    print(result)
                else:
                    print("Yeah... division by zero. Smart move...")
                    continue
                while(True):
                    print("Do you want to store the result? (y / n):")
                    store = input()
                    if store == "y":
                        memory = result
                        break
                    elif store == "n":
                        break
                    else:
                        continue
                while(True):
                    print("Do you want to continue calculations? (y / n):")
                    more_calc = input()
                    if more_calc == "y":
                        break
                    elif more_calc == "n":
                        sys.exit(0)
                    else:
                        continue

            else:
                print(
                    "Yes ... an interesting math operation. You've slept through all classes, haven't you?")
        else:
            print("Do you even know what numbers are? Stay focused!")
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are",
           "Are you sure? It is only one digit! (y / n)",
           "Don't be silly! It's just one number! Add to the memory? (y / n)",
           "Last chance! Do you really want to embarrass yourself? (y / n)"
    ]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.0", "\n".join([msg[9] + msg[6], add_memory("20.0")])), ("n", msg[5]), ("n", "")),
            (("2 + 5.5", add_memory("7.5")), ("y", msg[5]), ("y", msg[0]), ("M - 9", add_memory("-1.5")), ("n", msg[5]), ("n", "")),
            (("225 / 15", add_memory("15.0")), ("y", msg[5]), ("y",msg[0]),
             ("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[10]), ("y", msg[11]), ("n", msg[5]), ("y", msg[0]),
            ("M - 10", add_memory("5.0")), ("y", msg[10]), ("y", msg[11]), ("y", msg[12]), ("y", msg[5]), ("y", msg[0]),
             ("M / M",  "\n".join([msg[9] + msg[6], add_memory("1.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
- name: helpers.py
  visible: true
  text: |2

    import messages


    def isfloat(num):
        try:
            float(num)
            return True
        except ValueError:
            return False


    def check(v1, v2, v3):
        msg = ""
        if is_one_digit(v1) and is_one_digit(v2):
            msg = msg + messages.msg_6
        if (v1 == 1 or v2 == 1) and v3 == "*":
            msg = msg + messages.msg_7
        if (v1 == 0 or v2 == 0) and (v3 == "*" or v3 == "+" or v3 == "-"):
            msg = msg + messages.msg_8
        if msg != "":
            msg = messages.msg_9 + msg
            print(msg)


    def is_one_digit(v):
        if (-10 < float(v) < 10) and float(v).is_integer():
            return True
        else:
            return False
  learner_created: true
- name: messages.py
  visible: true
  text: |2-

    msg_0 = "Enter an equation"

    msg_1 = "Yeah... division by zero. Smart move..."

    msg_2 = "Do you want to store the result? (y / n):"

    msg_3 = "Do you want to continue calculations? (y / n):"

    msg_4 = "Yes ... an interesting math operation. You've slept through all classes, haven't you?"

    msg_5 = "Do you even know what numbers are? Stay focused!"

    msg_6 = " ... lazy"

    msg_7 = " ... very lazy"

    msg_8 = " ... very, very lazy"

    msg_9 = "You are"
  learner_created: true
feedback_link: https://hyperskill.org/projects/208/stages/1043/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 07 Mar 2022 23:57:02 UTC
record: -1
